version: '3.9'

services:
  #db
  mongodb:
    image: mongo:latest
    container_name: ${PROJECT_NAME}_${DB_NAME}
    restart: always
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - db:/data/db/
      - ./server/mongo-init/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_DATABASE: cmpt353db
      ME_CONFIG_MONGODB_URL: mongodb://mongodb:27017/
    networks:
      app:
        aliases:
          - mongo
  mongo-express:
    image: mongo-express
    container_name: ${PROJECT_NAME}_mongo-express
    restart: always
    ports:
      - "8089:8089"
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://mongodb:27017/
    networks:
      app:
        aliases:
          - mongo-express
#
    #      ELK stack for logging and debugging
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    depends_on:
      - elasticsearch
    environment:
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9300"
    ports:
      - "9411:9411"
    networks:
      app:
        aliases:
          - "zipkin"
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.1
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - my-db:/usr/share/elasticsearch/data
    ports:
      #       Cluster communication
      - "9300:9300"
      #       REST communication
      - "9200:9200"
    networks:
      app:
        aliases:
          - "elasticsearch"
  kibana:
    image: elastic/kibana:7.7.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - "5601:5601"
    networks:
      app:
        aliases:
          - "kibana"
  logstash:
    image: elastic/logstash:7.7.0
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./ELK-stack-config/config:/etc/logstash/conf.d
    ports:
      - "6000:6000"
    networks:
      app:
        aliases:
          - "logstash"

  # team members
  mysql:
    image: mysql:latest
    container_name: cpmt353_project_team
    restart: always
    ports:
      - "3307:3306"
    volumes:
      - ./server/mysql-init/team-init.sql:/docker-entrypoint-initdb.d/team-init.sql
      - team-db:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: project
      MYSQL_DATABASE: team
    networks:
      app:
        aliases:
          - mysql


  # client
#  client:
#    build: ${CLIENT_BUILD_LOCATION}
#    image: node_client:latest
#      # set container name
#    container_name: ${PROJECT_NAME}_${CLIENT_SERVICE_NAME}
#      #set environment
#    environment:
#      NODE_ENV: ${APPLICATION_ENV}
#      # The location of dockerfile to build this service
#    ports:
#      - ${CLIENT_PORT}:${CLIENT_PORT}
#    networks:
#      app:
#        aliases:
#          - 'client'
#  # #server
#  user-server:
#    build: ${SERVER_BUILD_LOCATION}
#    image: node_server:alpine
#     # set container name
#    container_name: ${PROJECT_NAME}_${SERVER_SERVICE_NAME}
#    depends_on:
#      - mongodb
#     #set environment
#    environment:
#      NODE_ENV: ${APPLICATION_ENV}
#      MONGODB: mongodb
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: eureka
#     # Ports to map, mapping our port 8080, to the port 8080 on the container
#    ports:
#      - ${SERVER_PORT}:${SERVER_PORT}
#    networks:
#      app:
#        aliases:
#         - 'user-server'

  configserver:
    build: ./configserver
    image: configserver:latest
    container_name: configServer
    environment:
      PROFILE: "dev"
    ports:
      - "7071:7071"
    networks:
      app:
        aliases:
          - "configserver"
  eurekaserver:
    build: ./eureka-server
    image: eurekaserver:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    container_name: eurekaServer
    ports:
      - "7070:7070"
    environment:
      configserver: configserver
    depends_on:
      - mongodb
      - configserver
    networks:
      app:
        aliases:
          - "eurekaserver"
  gatewayserver:
    build: ./gateway-server
    image: gatewayserver:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    container_name: gatewayServer
    ports:
      - "7072:7072"
    environment:
      PROFILE: "dev"
      SERVER_PORT: "7072"
      LOGSTASH: logstash
      CONFIGSERVER_URI: http://configserver:7071
      EUREKASERVER_URI: http://eurekaserver:7070/eureka/
      EUREKASERVER_PORT: "7070"
      CONFIGSERVER_PORT: "7071"
    depends_on:
      - mongodb
      - configserver
      - eurekaserver
    networks:
      app:
        aliases:
          - "gatewayserver"


networks:
  app:
    driver: bridge

volumes:
  my-db:
    driver: local
  db:
    driver: local
  team-db:
    driver: local
